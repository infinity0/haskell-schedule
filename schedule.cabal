Name: schedule
Version: 0.1
Cabal-Version: >= 2
Build-Type: Simple
License: GPL
License-File: COPYING
Copyright: 2016-2019 Ximin Luo
Author: Ximin Luo
Maintainer: infinity0@pwned.gg
Stability: alpha
Homepage: https://github.com/infinity0/haskell-schedule
Bug-Reports: https://github.com/infinity0/haskell-schedule/issues
Synopsis: Schedule sub-computations to run later, in a pure way
Description:
  Pure co-operative scheduled computations.
  .
  Co-operative means that we do not interrupt computations that don't expect to
  be interrupted, such as 3rd-party libraries that have no knowledge of this
  monad. In other words, we don't throw asynchronous exceptions, and there is
  no "background executor" that automatically runs these tasks, interleaving
  them with your main computation in an order that would be hard to predict.
  .
  Motivation:
  .
  For many secure communications protocols, we want a guarantee of freshness. But
  impure timeout-based code can be hard to analyse, and can have very complex
  interactions with the rest of the protocol system. That's where this library
  comes in, and that's why we made the design choices stated above, such as
  avoiding of interrupts and requiring explicit user-controlled task execution.
  .
  Although motivated by these security goals, we intend this library to be a
  generally-useful tool, that has the power to replace impure timeout mechanisms
  like "System.Timeout" where appropriate.
  .
  See "Control.Monad.Trans.Schedule" for the main API of this library.
Category: Control, Schedule, Cron, Later, After, Delay, Timer, Timeout
Tested-With: GHC >= 8.6
Extra-Source-Files: LICENSE.GPL-3

Source-Repository head
    Type: git
    Location: https://github.com/infinity0/haskell-schedule

-- use `cabal haddock --hyperlink-source` to make sure that our hyperlinks to
-- our example source code are generated correctly.
Library
    Default-Language: Haskell2010
    GHC-Options: -Wall
    Build-Depends:
        base                    >= 4
      -- for Control.Arrow.*
      , arrows
      -- for Control.Monad.*
      , transformers
      -- for Data.Rsv.*
      , containers
      , lens
      -- for Control.Clock.System
      , async
      , time                    >= 1.5
      , system-time-monotonic   >= 0.2
    HS-Source-Dirs: src
    Exposed-Modules:
        Control.Clock
      , Control.Clock.System
      , Control.Arrow.Transformer.Schedule
      , Control.Monad.Trans.Schedule
      , Data.Rsv
      , Data.Rsv.Common
      , Data.Rsv.RList
      , Data.Rsv.RMMap
      , Data.Schedule
      , Data.Schedule.Internal

Test-Suite doctests
    Default-Language: Haskell2010
    GHC-Options: -O2 -Wall -threaded
    Build-Depends:
        base
      , doctest
      , schedule
    HS-Source-Dirs: test
    Type: exitcode-stdio-1.0
    Main-Is: DocTests.hs

Test-Suite unit
    Default-Language: Haskell2010
    GHC-Options: -O2 -Wall -threaded
    Build-Depends:
        base
      , tasty
      , tasty-quickcheck
      , tasty-hunit
      , checkers
      , transformers
      , schedule
    HS-Source-Dirs: test
    Type: exitcode-stdio-1.0
    Main-Is: UnitTests.hs
    Other-Modules:
        Control.Monad.Trans.ScheduleTest
      , Data.Rsv.Example
      , Data.Rsv.ExampleRecursive
